Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
Mappings:
  WebAppRegion:
    us-west-2:
      HVM64: ami-07b4f3c02c7f83d59    
Resources:
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2Role
      Path: / 
  UdacityS3ReadOnlyEC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  
      SecurityGroupEgress:  
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install Web Application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: |
                <?php
                echo '<h1>it works! Udagram, Udacity</h1>';
                  ?>
              mode: 000644
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              sendmail:
                enabled: false
                ensureRunning: false

    Properties:
      ImageId: !FindInMap [WebAppRegion, !Ref "AWS::Region", HVM64]
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'  
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      UserData: 
        Fn::Base64:  !Sub  
          #!/bin/bash
          apt-get update 
          sudo apt-get -y install python-pip
          sudo apt-get -y install awscli
          apt-get install apache2 -y
          systemctl start apache2.service
          aws --version
          aws s3 ls
          sudo rm /var/www/html/index.html
          aws s3 cp van.jpg s3://udacity-devops-proj2
          systemctl restart apache2.service
          #unzip -o udacity.zip
          


          
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRI-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      # LoadBalancerNames:
      #   - !Ref WebAppLB
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  # WebAppLB:
  #   Type: AWS::ElasticLoadBalancing::LoadBalancer
  #   Properties:
  #     Listeners:
  #       - InstancePort: '80'
  #       - InstanceProtocol: 'HTTP'
  #       - LoadBalancerPort: '80'
  #       - Protocol: 'HTTP'
  #     Subnets:
  #       Fn::ImportValue: 
  #         Fn::Sub: "${EnvironmentName}-PRI1-SN"
  #       Fn::ImportValue: 
  #         Fn::Sub: "${EnvironmentName}-PRI2-SN"
  #         #!Join [",",[Fn::Sub: "${EnvironmentName}-PRI1-SN", Fn::Sub: "${EnvironmentName}-PRI2-SN"]]
  #     SecurityGroups:
  #     - Ref: WebServerSecGroup 
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # Listeners:
      #   - InstancePort: 80
      #   - InstanceProtocol: HTTP
      #   - LoadBalancerPort: 80
      #   - Protocol: HTTP
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          #!Join [",",[Fn::Sub: "${EnvironmentName}-PRI1-SN", Fn::Sub: "${EnvironmentName}-PRI2-SN"]]
      SecurityGroups:
      - Ref: LBSecGroup 
  Listener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      LoadBalancerArn:  !Ref 'WebAppLB'
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/*]
      ListenerArn: !Ref Listener
      Priority: 1    
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /   
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub:  "${EnvironmentName}-VPCID"  
Outputs:
  WebsiteURL:
    Description: website URL
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    




      




    





